# Multi-stage build for efficient image size
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

# Java build stage
FROM openjdk:17-jdk-slim AS backend-builder

WORKDIR /app
COPY backend-spring/demo/ ./

# Copy frontend build to Spring Boot static resources
COPY --from=frontend-builder /app/frontend/dist ./src/main/resources/static

# Make gradlew executable and build
RUN chmod +x gradlew
RUN ./gradlew build -x test --no-daemon

# Final runtime image
FROM openjdk:17-jre-slim

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the built JAR file
COPY --from=backend-builder /app/build/libs/demo-1.0.0.jar app.jar

# Create a non-root user
RUN addgroup --system appgroup && adduser --system appuser --ingroup appgroup
RUN chown -R appuser:appgroup /app
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8080/api/health || exit 1

# Run the application
CMD ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "app.jar"] 